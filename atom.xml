<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ritchie&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-05T16:13:22.027Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ritchie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mongoose</title>
    <link href="http://yoursite.com/2020/03/06/mongoose%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/06/mongoose笔记/</id>
    <published>2020-03-06T01:01:59.000Z</published>
    <updated>2020-03-05T16:13:22.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-MongoDB-数据库的基本概念"><a href="#1-MongoDB-数据库的基本概念" class="headerlink" title="1.MongoDB 数据库的基本概念"></a>1.<code>MongoDB</code> 数据库的基本概念</h2><ul><li>可以有多个数据库</li><li>一个数据库中可以有多个集合</li><li>一个集合中可以有多个文档</li><li>文档结构很灵活，没有任何限制</li><li><code>MongoDB</code> 非常灵活<ul><li>当你需要插入数据的时候，只需要指定往哪个数据库的哪个集合操作就可以了</li><li>一切都由<code>MongoDB</code>来自动完成建库建表这件事</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//qq数据库</span></span><br><span class="line">    qq:&#123;</span><br><span class="line">        <span class="comment">//qq数据库中的users集合</span></span><br><span class="line">        users: [</span><br><span class="line">            <span class="comment">//users集合中的文档</span></span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'ritchie'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'孔祥姗'</span>, <span class="attr">age</span>: <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>: <span class="string">'王琦'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;，</span><br><span class="line">            ...</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">//qq数据库中的products集合</span></span><br><span class="line">        products:[</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//淘宝数据库</span></span><br><span class="line">    taobao:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//百度数据库</span></span><br><span class="line">    baidu:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-起步"><a href="#2-起步" class="headerlink" title="2.起步"></a>2.起步</h2><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure><p>hello world:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>,&#123; <span class="attr">useMongoClient</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Cat = mongoose.model(<span class="string">'Cat'</span>,&#123; <span class="attr">name</span>:<span class="built_in">String</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kitty = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'kxs'</span> &#125;)</span><br><span class="line">kitty.save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'喵喵喵'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-官方指南"><a href="#3-官方指南" class="headerlink" title="3.官方指南"></a>3.官方指南</h2><h3 id="3-1-设计-Schema-发布-Model"><a href="#3-1-设计-Schema-发布-Model" class="headerlink" title="3.1. 设计 Schema 发布 Model"></a>3.1. 设计 Schema 发布 Model</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.连接数据库</span></span><br><span class="line"><span class="comment">// 指定连接的数据库不需要存在，当你插入第一条数据之后就会自动被创建出来</span></span><br><span class="line">mongoose.connect(<span class="string">'mongoose://localhost/itcast'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema</span><br><span class="line"><span class="comment">// 2.设计文档结构</span></span><br><span class="line"><span class="comment">// 字段名称就是表结构中的属性名称</span></span><br><span class="line"><span class="comment">// 约束的目的是为了保证数据的完整性，不要有脏数据</span></span><br><span class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="built_in">require</span>: <span class="literal">true</span> <span class="comment">//必须有</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    email: &#123;</span><br><span class="line">        type: <span class="built_in">String</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'xxx@qq.com'</span> <span class="comment">//默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将文档结构发布为模型</span></span><br><span class="line"><span class="comment">// mongoose.model 方法就是用来将一个架构发布为 model</span></span><br><span class="line"><span class="comment">// 第一个参数：传入一个大写名词单数字符串用来表示你的数据库名称、</span></span><br><span class="line"><span class="comment">//mongoose会自动将大写名词的字符串生成小写复数的集合名称</span></span><br><span class="line"><span class="comment">//例如这里的User最终会变成users集合名称</span></span><br><span class="line"><span class="comment">// 第二个参数：架构Schema</span></span><br><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>, userSchema)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.当我们有了模型构造函数之后，就可以使用这个构造函数对users集合中的数据为所欲为了（增删改查）</span></span><br></pre></td></tr></table></figure><h3 id="3-2-增加数据"><a href="#3-2-增加数据" class="headerlink" title="3.2. 增加数据"></a>3.2. 增加数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> admin = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    username: <span class="string">'admin'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    email: <span class="string">'admin@admin.com'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">admin.save(<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-3-查询"><a href="#3-3-查询" class="headerlink" title="3.3. 查询"></a>3.3. 查询</h3><p>查询所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>按条件查询所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.find(&#123;</span><br><span class="line">   username: <span class="string">'zs'</span> </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>按条件查询单个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123;</span><br><span class="line">   username: <span class="string">'zs'</span> </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-4-更新数据"><a href="#3-4-更新数据" class="headerlink" title="3.4. 更新数据"></a>3.4. 更新数据</h3><p>根据条件更新所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.update(conditions, docs, options, callback)</span><br><span class="line"><span class="comment">//conditions条件</span></span><br><span class="line"><span class="comment">//docs更新的内容</span></span><br></pre></td></tr></table></figure><p>根据指定条件更新一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.findOneAndUpdate(conditions, docs, options, callback)</span><br></pre></td></tr></table></figure><p>根据id更新一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.findByIdAndUpdate(<span class="string">'5a001b23d219eb00c8581186'</span>, &#123;</span><br><span class="line">   username: <span class="string">'zs'</span> </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'更新成功'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-5-删除数据"><a href="#3-5-删除数据" class="headerlink" title="3.5. 删除数据"></a>3.5. 删除数据</h3><p>根据条件删除所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.remove(&#123;</span><br><span class="line">   username: <span class="string">'zs'</span> </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据条件删除一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.findOneAndRemove(conditions, options, callback)</span><br></pre></td></tr></table></figure><p>根据id删除一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.findByIdAndRemove(id, options, callback)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-MongoDB-数据库的基本概念&quot;&gt;&lt;a href=&quot;#1-MongoDB-数据库的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.MongoDB 数据库的基本概念&quot;&gt;&lt;/a&gt;1.&lt;code&gt;MongoDB&lt;/code&gt; 数据库的基本概念&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Express</title>
    <link href="http://yoursite.com/2020/03/06/Express/"/>
    <id>http://yoursite.com/2020/03/06/Express/</id>
    <published>2020-03-06T01:01:58.000Z</published>
    <updated>2020-03-05T16:13:00.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>原生的<code>http</code>在某些方面不足以应对我们的开发需求，所以我们就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码更高度统一。</p><p>在Node中，有很多Web开发框架，这里以<code>express</code>为主。</p><ul><li><a href="http://expressjs.com/" target="_blank" rel="noopener">http://expressjs.com/</a></li></ul><h3 id="1-起步"><a href="#1-起步" class="headerlink" title="1. 起步"></a>1. 起步</h3><h4 id="1-1-安装："><a href="#1-1-安装：" class="headerlink" title="1.1. 安装："></a>1.1. 安装：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save express</span><br></pre></td></tr></table></figure><h4 id="1-2-hello-world"><a href="#1-2-hello-world" class="headerlink" title="1.2. hello world:"></a>1.2. hello world:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 app</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'express app is running...'</span>)           </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-3-基本路由"><a href="#1-3-基本路由" class="headerlink" title="1.3. 基本路由"></a>1.3. 基本路由</h4><p>get:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 GET 方法请求 / 的时候，执行对应的处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 POST 方法请求 / 的时候，执行对应的处理函数</span></span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'Got a POST request'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>##### </p><h4 id="1-4-静态服务"><a href="#1-4-静态服务" class="headerlink" title="1.4. 静态服务"></a>1.4. 静态服务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//个人理解：</span></span><br><span class="line"><span class="comment">//浏览器向服务器发请求，服务器返回响应</span></span><br><span class="line"><span class="comment">//浏览器收到HTML响应内容之后，就要开始从上到下依次解析</span></span><br><span class="line"><span class="comment">//在解析的过程中遇到：</span></span><br><span class="line"><span class="comment">//link,script,img,iframe,video,audio等具有src或者href属性标签（具有外链的资源）的时候</span></span><br><span class="line"><span class="comment">//浏览器会对这些资源发起新的请求，每一个具有外链的资源都是一个新的请求</span></span><br><span class="line"><span class="comment">//也就是一张图片或一个css文件都会向服务器发送新的请求</span></span><br><span class="line"><span class="comment">//我们为了方便的统一处理这些静态资源，所以可以把所有的静态资源都放在public目录中</span></span><br><span class="line"><span class="comment">//例如css、img、js、第三方包等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接访问public中的资源</span></span><br><span class="line"><span class="comment">// /public资源</span></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当以 /public/ 开头的时候， 去./public/ 目录中查找对应的资源</span></span><br><span class="line"><span class="comment">// /public/xxx</span></span><br><span class="line">app.use(<span class="string">'/public/'</span> , express.static(<span class="string">'./public/'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当以 /views/ 开头的时候， 去./views/ 目录中查找对应的资源</span></span><br><span class="line"><span class="comment">// /views/xxx</span></span><br><span class="line">app.use(<span class="string">'/views/'</span> , express.static(<span class="string">'./views/'</span>));</span><br></pre></td></tr></table></figure><h3 id="2-在Express中使用art-template模板引擎"><a href="#2-在Express中使用art-template模板引擎" class="headerlink" title="2. 在Express中使用art-template模板引擎"></a>2. 在Express中使用<code>art-template</code>模板引擎</h3><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express-art-template 是专门用来在express中把art-template整合到express中的</span></span><br><span class="line"><span class="comment">// art-template必须安装，因为express-art-template依赖了art-template</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数表示，当渲染以.html结尾的文件时，使用art-template模板引擎</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Express为 Response提供了一个方法：render</span></span><br><span class="line"><span class="comment">// render 方法默认是不可以使用的，但是如果配置了模板引擎就可以是使用了</span></span><br><span class="line"><span class="comment">// res.render('文件名',&#123;模板数据&#125;)</span></span><br><span class="line"><span class="comment">// 第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件</span></span><br><span class="line"><span class="comment">// Express有一个约定：开发人员把所有的视图文件都放到 views 目录中</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">        titile: <span class="string">'首页'</span><span class="comment">//用'首页'替换index.html中的&#123;&#123; title &#125;&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设要渲染views文件中的admin文件夹中的xxx.html</span></span><br><span class="line"><span class="comment">// 记住不要写views</span></span><br><span class="line">app.get(<span class="string">'/admin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'/admin/xxx.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-表单请求体数据"><a href="#3-表单请求体数据" class="headerlink" title="3.表单请求体数据"></a>3.表单请求体数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    action 就是表单提交的地址，说白了就是请求的url地址</span></span><br><span class="line"><span class="comment">    method 请求方法</span></span><br><span class="line"><span class="comment">        get</span></span><br><span class="line"><span class="comment">        post</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">"app.js"</span> <span class="attr">method</span> = <span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单中需要提交的表单控件元素必须具有name属性--&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单GET请求体数据"><a href="#表单GET请求体数据" class="headerlink" title="表单GET请求体数据"></a>表单GET请求体数据</h4><p>//Express内置了一个API，可以直接通过<code>req.query</code>来获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取表单 GET 请求体数据</span></span><br><span class="line">    <span class="comment">// 2. 处理</span></span><br><span class="line">    <span class="comment">// 3. 发送响应</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以通过 req.query 来获取 get 请求体数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.query)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="表单POST请求体数据"><a href="#表单POST请求体数据" class="headerlink" title="表单POST请求体数据"></a>表单POST请求体数据</h4><p>在 Express 中没有内置获取表单 POST 请求体的 API，这里我们需要使用一个第三方包：<code>body-parser</code>。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save body-parser</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引包</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 配置 body-parser</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在 req 请求对象上会多出一个属性：body</span></span><br><span class="line"><span class="comment">// 也就是说可以直接通过 req.body 来获取表单 POST 请求体数据了</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过 req.body 来获取表单 POST 请求体数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-CRUD起步"><a href="#4-CRUD起步" class="headerlink" title="4.CRUD起步"></a>4.<code>CRUD</code>起步</h3><h4 id="4-1-起步"><a href="#4-1-起步" class="headerlink" title="4.1. 起步"></a>4.1. 起步</h4><ul><li>初始化</li><li>安装依赖</li><li>模板处理</li></ul><h4 id="4-2-路由设计"><a href="#4-2-路由设计" class="headerlink" title="4.2. 路由设计"></a>4.2. 路由设计</h4><table><thead><tr><th>请求方法</th><th>请求路径</th><th>get参数</th><th>post参数</th><th>备注</th></tr></thead><tbody><tr><td>GET</td><td>/students</td><td></td><td></td><td>渲染首页</td></tr><tr><td>GET</td><td>/students/new</td><td></td><td></td><td>渲染添加学生页面</td></tr><tr><td>POST</td><td>/students/new</td><td></td><td>name、age、gender、hobbies</td><td>处理添加学生请求</td></tr><tr><td>GET</td><td>/students/edit</td><td>id</td><td></td><td>渲染编辑页面</td></tr><tr><td>POST</td><td>/students/edit</td><td></td><td>id、name、age、gender、hobbies</td><td>处理编辑请求</td></tr><tr><td>GET</td><td>/students/delete</td><td>id</td><td></td><td>处理删除请求</td></tr></tbody></table><h4 id="4-3-提取路由模块"><a href="#4-3-提取路由模块" class="headerlink" title="4.3. 提取路由模块"></a>4.3. 提取路由模块</h4><p><code>router.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">router.js路由模块</span></span><br><span class="line"><span class="comment">职责：</span></span><br><span class="line"><span class="comment">处理路由</span></span><br><span class="line"><span class="comment">根据不同的请求方法+请求路径设置具体的请求处理函数</span></span><br><span class="line"><span class="comment">模块职责要单一，不要乱写</span></span><br><span class="line"><span class="comment">划分模块的目的就是为了增强项目代码的可维护性</span></span><br><span class="line"><span class="comment">提升开发效率</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express 提供了一种很好的方式</span></span><br><span class="line"><span class="comment">// 专门用来包装路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个路由容器</span></span><br><span class="line"><span class="keyword">var</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 把路由容器都挂载到 router 路由容器中</span></span><br><span class="line">router.get(<span class="string">'/students'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/students/new'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/students/new'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 把 router 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p><code>app.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载router.js文件，获取到router.js中的router</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/public/'</span> , express.static(<span class="string">'./public/'</span>));</span><br><span class="line">app.use(<span class="string">'/node_modules/'</span> , express.static(<span class="string">'./node_modules/'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把路由容器挂载到 app 服务中</span></span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running 3000...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-4-设计操作数据的-API-文件模块"><a href="#4-4-设计操作数据的-API-文件模块" class="headerlink" title="4.4. 设计操作数据的 API 文件模块"></a>4.4. 设计操作数据的 API 文件模块</h4><p><code>student.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">student.js</span></span><br><span class="line"><span class="comment">数据操作文件模块</span></span><br><span class="line"><span class="comment">职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dbPath = <span class="string">'./db.json'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有学生列表</span></span><br><span class="line"><span class="comment">// return []</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">callback 中的参数</span></span><br><span class="line"><span class="comment">第一个参数是 err</span></span><br><span class="line"><span class="comment">成功是 null，错误是 错误对象</span></span><br><span class="line"><span class="comment">第二个参数是结果</span></span><br><span class="line"><span class="comment">成功是 数组， 错误是 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">exports.find = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(dbPath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// data是db.json文件字符串</span></span><br><span class="line">        <span class="comment">// JSON.parse(data) 将字符串转换成对象</span></span><br><span class="line">        <span class="comment">// JSON.parse(data).students 就是对象中的students</span></span><br><span class="line">        callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data).students)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在router.js文件中调用find方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var Student = require('./student')</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">router.get('/students', function (req, res) &#123;</span></span><br><span class="line"><span class="comment">Student.find(function (err, students) &#123;</span></span><br><span class="line"><span class="comment">if (err) &#123;</span></span><br><span class="line"><span class="comment">return res.send('Server error')</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">res.render('index.html', &#123;</span></span><br><span class="line"><span class="comment">students: students</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加保存学生</span></span><br><span class="line">exports.save = <span class="function"><span class="keyword">function</span> (<span class="params">student, callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(dbPath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理 id 唯一的，不重复</span></span><br><span class="line">        student.id = students[students.length - <span class="number">1</span>].id + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把用户传递的对象保存到数组中</span></span><br><span class="line">        students.push(student)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把对象数据转换为字符串</span></span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="built_in">JSON</span>.stringfy(&#123;</span><br><span class="line">            students: students</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把字符串保存到文件中</span></span><br><span class="line">        fs.writeFile(dbPath, fileData, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// 错误就是把错误对象传递给它</span></span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 成功就没错，所以错误对象是 null</span></span><br><span class="line">            callback(<span class="literal">null</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在router.js文件中调用save方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">router.post('/students/new', function (req, res) &#123;</span></span><br><span class="line"><span class="comment">Student.save(req.body, function (err) &#123;</span></span><br><span class="line"><span class="comment">if (err) &#123;</span></span><br><span class="line"><span class="comment">return res.send('Server error.')</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">res.redirect('/students')</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新学生</span></span><br><span class="line">exports.updateByID = <span class="function"><span class="keyword">function</span> (<span class="params">student, callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(daPath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 要修改谁，就需要把谁找出来</span></span><br><span class="line">        <span class="comment">// ES6 中的一个数组方法：find</span></span><br><span class="line">        <span class="comment">// 需要接收一个函数作为参数</span></span><br><span class="line">        <span class="comment">// 当某个便利项符合 item.id === student.id 条件的时候，find会终止遍历，同时返回遍历</span></span><br><span class="line">        <span class="keyword">var</span> stu = students.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.id === students.id</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历拷贝对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> student) &#123;</span><br><span class="line">            stu[key] = student[key]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把对象数据转换为字符串</span></span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="built_in">JSON</span>.stringfy(&#123;</span><br><span class="line">            students: students</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把字符串保存到文件中</span></span><br><span class="line">        fs.writeFile(dbPath, fileData, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// 错误就是把错误对象传递给它</span></span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 成功就没错，所以错误对象是 null</span></span><br><span class="line">            callback(<span class="literal">null</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除学生</span></span><br><span class="line">exports.deleteByID = <span class="function"><span class="keyword">function</span> (<span class="params">id, callback</span>) </span>&#123;</span><br><span class="line">    fs.readFile(dbPath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// findIndex 方法专门用来根据条件查找元素的下标</span></span><br><span class="line">        <span class="keyword">var</span> deleteID = students.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item.id === <span class="built_in">parseInt</span>(id)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据下标从数组中删除对应的学生对象</span></span><br><span class="line">        students.splice(deleteID, <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把对象数据转换为字符串</span></span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="built_in">JSON</span>.stringfy(&#123;</span><br><span class="line">            students: students</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把字符串保存到文件中</span></span><br><span class="line">        fs.writeFile(dbPath, fileData, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// 错误就是把错误对象传递给它</span></span><br><span class="line">                <span class="keyword">return</span> callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 成功就没错，所以错误对象是 null</span></span><br><span class="line">            callback(<span class="literal">null</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h2&gt;&lt;p&gt;原生的&lt;code&gt;http&lt;/code&gt;在某些方面不足以应对我们的开发需求，所以我们就需要使用框架来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://yoursite.com/2020/03/06/React/"/>
    <id>http://yoursite.com/2020/03/06/React/</id>
    <published>2020-03-06T01:01:57.000Z</published>
    <updated>2020-03-05T16:12:26.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="1-React中的几个核心的概念"><a href="#1-React中的几个核心的概念" class="headerlink" title="1. React中的几个核心的概念"></a>1. React中的几个核心的概念</h2><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><ul><li><strong>DOM的本质是什么</strong>：浏览器中的概念，用JS对象来表示页面上的元素，并提供了操作DOM对象的API;</li><li><strong>什么是React中的虚拟DOM</strong>：是框架中的概念，是程序员用JS对象来模拟页面上的DOM和DOM嵌套；</li><li><strong>为什么要实现虚拟DOM（虚拟DOM的目的）</strong>：为了实现页面中，DOM元素的高效更新；</li><li><strong>DOM和虚拟DOM的区别</strong>：<ul><li><strong>DOM</strong>：浏览器中提供的概念；用JS对象，表示页面上的元素，并提供了操作元素的API；</li><li><strong>虚拟DOM</strong>：是框架中的概念；是开发框架的程序员，手动用JS对象来模拟DOM元素和嵌套关系；<ul><li>本质：用JS对象，来模拟DOM元素和嵌套关系；</li><li>目的：就是为了实现页面元素的高效更新；</li></ul></li></ul></li></ul><h3 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h3><ul><li><strong>tree diff</strong>：新旧两颗DOM树，逐层对比的过程，就是Tree Diff；当整颗DOM逐层对比完毕，则所有需要被按需更新的元素，必然能够找到；</li><li><strong>component diff</strong>：在进行Tree Diff的时候，每一层中，组件级别的对比，叫做Component Diff；<ul><li>如果对比前后，组件的类型相同，则暂时认为此组件不需要被更新。</li><li>如果对比前后，组件的类型不同，则需要移除旧组件，创建新组件，并追加到页面上；</li></ul></li><li><strong>element diff</strong>：在进行组件对比的时候，如果两个组件类型相同，则需要进行元素级别的对比，这叫做Element Diff；</li></ul><h2 id="2-模块化和组件化"><a href="#2-模块化和组件化" class="headerlink" title="2.模块化和组件化"></a>2.模块化和组件化</h2><blockquote><p>什么是组件：组件的出现就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；</p></blockquote><ol><li><strong>什么是模块化：</strong>是从 <strong>代码</strong> 的角度来进行分析的；方便代码分层开发，保证每个功能模块的职能单一；把一些可复用的代码，抽离为单个的模块；便于项目的维护和开发；</li><li><strong>什么是组件化：</strong>是从 <strong>UI界面</strong> 的角度来进行分析的；前端的组件化，方便UI组件的重用；把一些可复用的UI元素，抽离为单独的组件；便于项目的维护和开发；</li><li><strong>组件化的好处：</strong>随着项目规模的增大，手里的组件越来越多，很方便就把现有的组件，拼接为一个完整的页面；</li><li><strong>Vue是如何实现组件化的：</strong>通过<code>.vue</code>文件，来创建对应的组件；<ul><li>template  结构</li><li>script        行为</li><li>style          样式</li></ul></li><li><strong>React如何实现组件化：</strong>React中有组件化的概念，但是并没有像vue这样的组件模板文件；React中，一切都是以JS来表现的；</li></ol><h2 id="3-Webpack"><a href="#3-Webpack" class="headerlink" title="3. Webpack"></a>3. Webpack</h2><h3 id="3-1-创建基本的webpack4-x项目"><a href="#3-1-创建基本的webpack4-x项目" class="headerlink" title="3.1 创建基本的webpack4.x项目"></a>3.1 创建基本的webpack4.x项目</h3><ol><li><p>快速初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录创建<code>src</code>源代码目录和<code>dist</code>产品目录</p></li><li><p>在src目录下创建<code>index.html</code>和<code>index.js</code></p></li><li><p>使用cnpm安装webpack</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><ul><li>注意：webpack4.x之后<code>webpack</code>命令行都是有<code>webpack-cli</code>来提供了。</li></ul></li><li><p>在项目根目录下创建配置文件<code>webpack.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span><span class="comment">// development（开发模式）或 production（生产模式）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行webpack进行将index.js打包输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure></li><li><p>注意：webpack4.x提供了<strong>约定大于配置</strong>的概念；目的是为了<strong>尽量减少配置文件的体积</strong>；</p><ul><li>默认约定了：<ul><li>打包的入口是<code>src</code> -&gt; <code>index.js</code></li><li>打包的输出文件是<code>dist</code> -&gt; <code>main.js</code></li><li>4.x 中新增了 <code>mode</code>选项（为必选项），可选的值为：<code>development</code>和<code>production</code>；</li></ul></li></ul></li></ol><h3 id="3-2-webpack-dev-server"><a href="#3-2-webpack-dev-server" class="headerlink" title="3.2 webpack-dev-server"></a>3.2 webpack-dev-server</h3><blockquote><p>每次更改完代码都需要重新运行<code>webpack</code>打包，而且还需要手动刷新浏览器。<code>webpack-dev-server</code>可以解决这个问题。</p></blockquote><ol><li><p>安装webpack-dev-server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server-D</span><br></pre></td></tr></table></figure></li><li><p>打开配置package.json文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open"</span><span class="comment">// --open表示自动打开页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li></ol><p>这样每次更改完代码保存后，都会自动进行打包生成新的main.js文件。</p><p><strong>注意：启动webpack-dev-server后，你在目标文件夹中是看不到编译后的文件的,实时编译后的文件都保存到了内存当中。我们可以认为在项目根目录中有一个看不见的main.js。</strong></p><h3 id="3-3-html-webpack-plugin"><a href="#3-3-html-webpack-plugin" class="headerlink" title="3.3 html-webpack-plugin"></a>3.3 html-webpack-plugin</h3><p><code>html-webpack-plugin</code>可以帮我们将页面生成到内存中</p><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure></li><li><p>配置文件<code>webpack.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: path.join(__dirname, <span class="string">'./src/index.html'</span>),     <span class="comment">// 源文件</span></span><br><span class="line">    filename: <span class="string">'index.html'</span>      <span class="comment">// 生成在内存中首页的名称</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">        htmlPlugin</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：<code>html-webpack-plugin</code>会自动将打包好的<code>main.js</code>引入到<code>index.html</code>中，所以不需要在<code>index.html</code>中手动引入。</p></li></ol><h2 id="4-在项目中使用React"><a href="#4-在项目中使用React" class="headerlink" title="4. 在项目中使用React"></a>4. 在项目中使用React</h2><ol><li><p>安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom -S</span><br></pre></td></tr></table></figure><ul><li>react：专门用于创建组件和虚拟DOM的，同时组件的生命周期都在这个包里</li><li>react-dom：专门进行DOM操作的，最主要的应用场景，就是<code>ReactDOM.render()</code></li></ul></li><li><p>在<code>index.html</code>页面中，创建容器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 容器，将来使用React创建的虚拟DOM元素，都会被渲染到这个指定的容器中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导入包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*index.js*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个导入的时候，接受的成员名称必须这么写</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span><span class="comment">// 创建组件、虚拟DOM元素、生命周期</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span><span class="comment">// 把创建好的组件和虚拟DOM放到页面上展示</span></span><br></pre></td></tr></table></figure></li><li><p>创建虚拟DOM元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*index.js*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是创建虚拟DOM元素的 API</span></span><br><span class="line"><span class="comment">// 第一个参数：字符串类型的参数，表示要创建的标签的名称</span></span><br><span class="line"><span class="comment">// 第二个参数：对象类型的参数，表示创建的元素的属性节点</span></span><br><span class="line"><span class="comment">// 第三个参数：子节点（包括其他虚拟DOM、或文本子节点）</span></span><br><span class="line"><span class="comment">// &lt;h1 title = "啊，五环" id = "myh1"&gt;你比四环多一环&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myh1 = React.createElement(<span class="string">'h1'</span>, &#123; <span class="attr">title</span>:<span class="string">'啊，五环'</span>, <span class="attr">id</span>:<span class="string">'myh1'</span> &#125;, <span class="string">'你比四环多一环'</span>)</span><br></pre></td></tr></table></figure></li><li><p>渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*index.js*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染虚拟DOM元素</span></span><br><span class="line"><span class="comment">// 第一个参数：表示要渲染的虚拟DOM对象</span></span><br><span class="line"><span class="comment">// 第二个参数：指定容器，注意：这里不能直接放元素容器的id字符串，需要放一个容器的DOM对象</span></span><br><span class="line">ReactDOM.render(myh1, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-JSX语法"><a href="#8-JSX语法" class="headerlink" title="8. JSX语法"></a>8. JSX语法</h2><blockquote><p>什么是JSX语法：就是符合 xml 规范的 JS 语法；（语法格式相对来说要比HTML严谨很多）</p></blockquote><ol><li><p><strong>如何启用JSX语法？</strong></p><ul><li><p>安装<code>babel</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i babel-preset-env babel-preset-stage-0 -D</span><br></pre></td></tr></table></figure></li><li><p>安装能够识别转换 JSX 语法的包<code>babel-preset-react</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i babel-preset-react -D</span><br></pre></td></tr></table></figure></li><li><p>添加<code>.babelrc</code>配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"stage-0"</span>, <span class="string">"react"</span>], </span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加babel-loader配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack-config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;   <span class="comment">// 所有第三方模块的配置规则</span></span><br><span class="line">        rules: [    <span class="comment">// 第三方匹配规则</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js|jsx$/</span>, <span class="attr">use</span>: <span class="string">'babel-loader'</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;,</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;h2 id=&quot;1-React中的几个核心的概念&quot;&gt;&lt;a href=&quot;#1-React中的几个核心的概念&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue笔记1</title>
    <link href="http://yoursite.com/2019/09/06/vue%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2019/09/06/vue笔记1/</id>
    <published>2019-09-06T09:07:06.000Z</published>
    <updated>2020-03-05T16:08:32.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Vue简介"><a href="#1-Vue简介" class="headerlink" title="1.Vue简介"></a>1.Vue简介</h3><p>vue是一个渐进式Javascript框架，可以自底向上逐层应用。</p><p>vue直接通过<code>&lt;script&gt;</code>标签进行引入，可以通过下载vue.js文件的方式引入或者直接引入CDN（如下）进行使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="2-创建第一个vue实例"><a href="#2-创建第一个vue实例" class="headerlink" title="2.创建第一个vue实例"></a>2.创建第一个vue实例</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="D:\blog\themes\indigo\source\img\1.png" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure><p>直接通过new Vue()创建一个vue的实例，可以传递一个参数{}给这个实例。</p><ul><li><p><strong>双括号</strong>：插值表达式</p></li><li><p><strong>挂载点</strong>：vue中的<code>el</code>（element）指向</p><p>标签的id，图中</p><p>标签就叫做vue的挂载点。vue只会处理挂载点中的内容。</p></li><li><p><strong>模板</strong>：模板指的就是挂载点内部的内容，可以写在挂载点内部，也可以写在vue中的<code>template</code>属性中。</p></li></ul><hr><h3 id="3-Vue实例中的数据，事件和方法"><a href="#3-Vue实例中的数据，事件和方法" class="headerlink" title="3.Vue实例中的数据，事件和方法"></a>3.Vue实例中的数据，事件和方法</h3><p>下图中vue的指令v-text和v-html可以把content变量通过文本和html的不同方式显示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\91197\Desktop\截图\2.png" alt="2" title>                </div>                <div class="image-caption">2</div>            </figure><p><img src="C:%5CUsers%5C91197%5CDesktop%5C%E6%88%AA%E5%9B%BE%5C3.png" alt="3"></p><p><code>v-on</code>该模板指令表示要绑定一个事件，下图中绑定的是click事件，该事件触发的时候调用了一个函数，这个函数要写在Vue实例中的methods对象中，点击Hello World后变成Vue。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\91197\Desktop\截图\4.png" alt="4" title>                </div>                <div class="image-caption">4</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Vue简介&quot;&gt;&lt;a href=&quot;#1-Vue简介&quot; class=&quot;headerlink&quot; title=&quot;1.Vue简介&quot;&gt;&lt;/a&gt;1.Vue简介&lt;/h3&gt;&lt;p&gt;vue是一个渐进式Javascript框架，可以自底向上逐层应用。&lt;/p&gt;
&lt;p&gt;vue直接通过&lt;c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git笔记2</title>
    <link href="http://yoursite.com/2019/09/04/git%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2019/09/04/git笔记2/</id>
    <published>2019-09-04T01:01:57.000Z</published>
    <updated>2019-09-04T11:46:52.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><h5 id="rm命令用于删除文件"><a href="#rm命令用于删除文件" class="headerlink" title="rm命令用于删除文件"></a><code>rm</code>命令用于删除文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p><code>$ rm test.txt</code>用于删除工作区中的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br></pre></td></tr></table></figure><p><code>$ git rm test.txt</code>用于删除版本库中的文件</p><p>如果不小心删错了工作区中的文件，还可以用<code>git checkout</code>来恢复文件，<code>git checkout</code>就是将版本库中的版本拷贝到工作区中。</p><p>注：文件如果没有添加到版本库中就被删除则无法恢复。</p><hr><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:ritchie33/learngit.git</span><br></pre></td></tr></table></figure><h5 id="将远程库与本地关联"><a href="#将远程库与本地关联" class="headerlink" title="将远程库与本地关联"></a>将远程库与本地关联</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><h5 id="第一次把本地master分支的内容推送到远程"><a href="#第一次把本地master分支的内容推送到远程" class="headerlink" title="第一次把本地master分支的内容推送到远程"></a>第一次把本地master分支的内容推送到远程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h5 id="把本地master分支推送到远程"><a href="#把本地master分支推送到远程" class="headerlink" title="把本地master分支推送到远程"></a>把本地master分支推送到远程</h5><hr><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:ritchie33/gitskills.git</span><br></pre></td></tr></table></figure><h5 id="把远程库克隆到本地"><a href="#把远程库克隆到本地" class="headerlink" title="把远程库克隆到本地"></a>把远程库克隆到本地</h5><hr><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><h5 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b 分支名</span><br></pre></td></tr></table></figure><h5 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名</span><br></pre></td></tr></table></figure><h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 分支名</span><br></pre></td></tr></table></figure><h5 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h5 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge 分支名</span><br></pre></td></tr></table></figure><h5 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d 分支名</span><br></pre></td></tr></table></figure><p>注：在一个分支上（图中的dev）做修改，只有add、commit之后这个分支才会像图里描述的那样前进一步，告诉Git新增了一个版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\91197\AppData\Roaming\Typora\typora-user-images\1567586338855.png" alt="1567586338855" title>                </div>                <div class="image-caption">1567586338855</div>            </figure><hr><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交，合并完成。</p><h5 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p><code>--pretty=oneline</code>：输出版本只显示一行</p><p><code>--abbrev-commit</code>：版本号只显示前几个字符</p><p>以下图片解释不同：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\91197\AppData\Roaming\Typora\typora-user-images\1567587299483.png" alt="1567587299483" title>                </div>                <div class="image-caption">1567587299483</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\91197\AppData\Roaming\Typora\typora-user-images\1567587382529.png" alt="1567587382529" title>                </div>                <div class="image-caption">1567587382529</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\91197\AppData\Roaming\Typora\typora-user-images\1567587437486.png" alt="1567587437486" title>                </div>                <div class="image-caption">1567587437486</div>            </figure><hr><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><h5 id="用no-fast-forward模式合并分支"><a href="#用no-fast-forward模式合并分支" class="headerlink" title="用no fast forward模式合并分支"></a>用no fast forward模式合并分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\91197\AppData\Roaming\Typora\typora-user-images\1567595003000.png" alt="1567595003000" title>                </div>                <div class="image-caption">1567595003000</div>            </figure><h5 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h5><p>一般情况下<code>master</code>分支都是用来发布新版本的，工作都在<code>dev</code>分支上，每个员工都有自己的分支，时不时往<code>dev</code>分支合并，最后要发布新版本时再将<code>dev</code>合并到<code>master</code>上，在<code>master</code>上发布新版本。</p><hr><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><h5 id="将当前工作现场储存"><a href="#将当前工作现场储存" class="headerlink" title="将当前工作现场储存"></a>将当前工作现场储存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure><h5 id="回到工作现场并删除stash"><a href="#回到工作现场并删除stash" class="headerlink" title="回到工作现场并删除stash"></a>回到工作现场并删除stash</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h5 id="查看stash内容"><a href="#查看stash内容" class="headerlink" title="查看stash内容"></a>查看stash内容</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure><h5 id="复制某次特定的提交到当前分支"><a href="#复制某次特定的提交到当前分支" class="headerlink" title="复制某次特定的提交到当前分支"></a>复制某次特定的提交到当前分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick 版本号</span><br></pre></td></tr></table></figure><p>用<code>git cherry-pick 版本号</code>命令，把bug提交的修改复制到当前分支，避免重复劳动。</p><hr><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>开发一个新功能一般会新建一个<code>feature</code>分支，在<code>feature</code>分支上开发，开发完成后与<code>dev</code>分支合并，最后删除<code>feature</code>分支。</p><h5 id="强行删除"><a href="#强行删除" class="headerlink" title="强行删除"></a>强行删除</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D 分支名</span><br></pre></td></tr></table></figure><p>如果要丢弃一个没有合并的分支，需要用<code>git branch -D 分支名</code>指令强行删除。</p><hr><p>详见：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;删除文件&quot;&gt;&lt;a href=&quot;#删除文件&quot; class=&quot;headerlink&quot; title=&quot;删除文件&quot;&gt;&lt;/a&gt;删除文件&lt;/h3&gt;&lt;h5 id=&quot;rm命令用于删除文件&quot;&gt;&lt;a href=&quot;#rm命令用于删除文件&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git笔记</title>
    <link href="http://yoursite.com/2019/08/30/git%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/30/git笔记/</id>
    <published>2019-08-30T05:48:41.000Z</published>
    <updated>2019-08-30T10:48:39.921Z</updated>
    
    <content type="html"><![CDATA[<h5 id="指定用户名和email地址"><a href="#指定用户名和email地址" class="headerlink" title="指定用户名和email地址"></a>指定用户名和email地址</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注：<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置。</p><h5 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br></pre></td></tr></table></figure><p>pwd命令用于显示当前目录。</p><h5 id="git-init命令可以把这个目录变成Git可以管理的仓库"><a href="#git-init命令可以把这个目录变成Git可以管理的仓库" class="headerlink" title="git init命令可以把这个目录变成Git可以管理的仓库"></a><code>git init</code>命令可以把这个目录变成Git可以管理的仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h5 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi readme.txt</span><br></pre></td></tr></table></figure><h5 id="把一个文件放到Git仓库需要两步。"><a href="#把一个文件放到Git仓库需要两步。" class="headerlink" title="把一个文件放到Git仓库需要两步。"></a>把一个文件放到Git仓库需要两步。</h5><h5 id="第一步，用命令git-add把文件添加到仓库："><a href="#第一步，用命令git-add把文件添加到仓库：" class="headerlink" title="第一步，用命令git add把文件添加到仓库："></a>第一步，用命令<code>git add</code>把文件添加到仓库：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><h5 id="第二步，用命令git-commit把文件提交到仓库："><a href="#第二步，用命令git-commit把文件提交到仓库：" class="headerlink" title="第二步，用命令git commit把文件提交到仓库："></a>第二步，用命令<code>git commit</code>把文件提交到仓库：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure><p><code>git commit</code>命令，<code>-m</code>后面输入这次提交的备注，比如做出了什么修改。</p><h3 id="小结1"><a href="#小结1" class="headerlink" title="小结1"></a>小结1</h3><p>使用<code>git init</code>命令把这个目录变成Git可以管理的仓库。</p><p>添加文件到Git仓库有两步：</p><ol><li><code>git add &lt;file&gt;</code></li><li><code>git commit -m &lt;message&gt;</code></li></ol><hr><h5 id="git-status命令告知我们仓库当前的状态"><a href="#git-status命令告知我们仓库当前的状态" class="headerlink" title="git status命令告知我们仓库当前的状态"></a><code>git status</code>命令告知我们仓库当前的状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h5 id="git-diff查看修改了什么内容，diff就是difference"><a href="#git-diff查看修改了什么内容，diff就是difference" class="headerlink" title="git diff查看修改了什么内容，diff就是difference"></a><code>git diff</code>查看修改了什么内容，diff就是difference</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt</span><br></pre></td></tr></table></figure><h3 id="小结2"><a href="#小结2" class="headerlink" title="小结2"></a>小结2</h3><ul><li>使用<code>git status</code>命令查看当前仓库的状态。</li><li>如果<code>git status</code>告知文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><hr><h5 id="用git-log命令查看历史记录-git-log命令从最近到最远显示"><a href="#用git-log命令查看历史记录-git-log命令从最近到最远显示" class="headerlink" title="用git log命令查看历史记录,git log命令从最近到最远显示"></a>用<code>git log</code>命令查看历史记录,<code>git log</code>命令从最近到最远显示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><h5 id="加上-pretty-oneline参数可以简化历史记录便于我们查看"><a href="#加上-pretty-oneline参数可以简化历史记录便于我们查看" class="headerlink" title="加上--pretty=oneline参数可以简化历史记录便于我们查看"></a>加上<code>--pretty=oneline</code>参数可以简化历史记录便于我们查看</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br></pre></td></tr></table></figure><h5 id="使用git-reset命令返回到之前的版本"><a href="#使用git-reset命令返回到之前的版本" class="headerlink" title="使用git reset命令返回到之前的版本"></a>使用<code>git reset</code>命令返回到之前的版本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p><code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，前第100个版本写成<code>HEAD~100</code>。</p><h5 id="git-reflog记录每一次命令"><a href="#git-reflog记录每一次命令" class="headerlink" title="git reflog记录每一次命令"></a><code>git reflog</code>记录每一次命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="小结3"><a href="#小结3" class="headerlink" title="小结3"></a>小结3</h3><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><hr><p>##### </p><h5 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a><strong>工作区</strong></h5><p>就是在电脑中的目录，learngit文件夹就是一个工作区。</p><h5 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a><strong>版本库</strong></h5><p>隐藏目录<code>.git</code>，是Git的版本库。</p><h5 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h5><p>下图中的stage就是暂存区。</p><p>前面把文件添加到Git的版本库中第一步是用<code>git add</code>命令，实际上就是把文件的修改添加到暂存区；第二步是用<code>git commit</code>命令，实际就是把暂存区里的所有内容全部提交到<code>master</code>分支。</p><p>可以理解为文件修改全部放到暂存区，然后一次性提交暂存区的所有修改。</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p><h3 id="小结4"><a href="#小结4" class="headerlink" title="小结4"></a>小结4</h3><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区，然后执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><hr><h5 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h5><p>如果要提交两次或多次修改，可以先进行第一次修改，然后使用<code>git add</code>命令将第一次修改放到暂存区，然后再进行第二次修改，再使用<code>git add</code>命令将第二次修改放到暂存区，以此类推，最后使用<code>git commit</code>命令提交到分支。</p><p>注：一定要将文件的修改<code>git add</code>后才可以使用<code>git commit</code>，因为<code>git commit</code>是将暂存区的文件修改提交到分支的，如果修改了文件但没有将文件修改使用<code>git add</code>添加到暂存区，则修改不会被提交到分支。</p><h3 id="小结5"><a href="#小结5" class="headerlink" title="小结5"></a>小结5</h3><p>第一次修改 –&gt; git add –&gt; 第二次修改 –&gt; git add –&gt; … –&gt; git commit</p><hr><h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p><code>git checkout --readme.txt</code>指的是把readme.txt文件在<strong>工作区</strong>的修改撤销。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br></pre></td></tr></table></figure><p><code>git reset HEAD readme.txt</code>指的是把readme.txt文件在<strong>暂存区</strong>的修改撤销。</p><h3 id="小结6"><a href="#小结6" class="headerlink" title="小结6"></a>小结6</h3><ul><li>如果对文件进行了修改还没有<code>git add</code>到暂存区，可以使用<code>git checkout --readme.txt</code>撤销工作区的修改。</li><li>如果对文件进行了修改且<code>git add</code>到暂存区了，可以使用<code>git reset HEAD readme.txt</code>撤销暂存区的修改。</li><li>如果对文件进行了修改<code>git add</code>到了暂存区，且使用<code>git commit</code>提交到了分支，可以使用<code>git reset</code>命令返回到之前的版本。</li></ul><hr><p>详见：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;指定用户名和email地址&quot;&gt;&lt;a href=&quot;#指定用户名和email地址&quot; class=&quot;headerlink&quot; title=&quot;指定用户名和email地址&quot;&gt;&lt;/a&gt;指定用户名和email地址&lt;/h5&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 外边距重叠及防止方法</title>
    <link href="http://yoursite.com/2019/08/20/CSS-%E5%A4%96%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A0%E5%8F%8A%E9%98%B2%E6%AD%A2%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/20/CSS-外边距重叠及防止方法/</id>
    <published>2019-08-20T08:39:18.000Z</published>
    <updated>2019-08-20T08:42:27.214Z</updated>
    
    <content type="html"><![CDATA[<p>两个或多个块级盒子的垂直相邻边界会重合。结果的边界宽度是相邻边界宽度中最大的值。如果出现负边界，则在最大的正边界中减去绝对值最大的负边界。如果没有正边界，则从零中减去绝对值最大的负边界。注意：相邻的盒子可能并非是由父子关系或同胞关系的元素生成。<br> 但是边界的重叠也有例外情况：</p><p>1、水平边距永远不会重合。 </p><p>2、在规范文档中，2个或以上的块级盒模型相邻的垂直margin会重叠。最终的margin值计算方法如下：<br>     a、全部都为正值，取最大者；<br>     b、不全是正值，则都取绝对值，然后用正值减去最大值；<br>     c、没有正值，则都取绝对值，然后用0减去最大值。 </p><p>注意：相邻的盒模型可能由DOM元素动态产生并没有相邻或继承关系。 </p><p>3、相邻的盒模型中，如果其中的一个是浮动的（float），垂直margin不会重叠，并且浮动的盒模型和它的子元素之间也是这样。 </p><p>4、设置了overflow属性的元素和它的子元素之间的margin不被重叠（overflow取值为visible除外）。 </p><p>5、设置了绝对定位（position:absolute）的盒模型，垂直margin不会被重叠，并且和他们的子元素之间也是一样。 </p><p>6、设置了display:inline-block的元素，垂直margin不会重叠，甚至和他们的子元素之间也是一样。 </p><p>7、如果一个盒模型的上下margin相邻，这时它的margin可能重叠覆盖（collapse through）它。在这种情况下，元素的位置（position）取决于它的相邻元素的margin是否重叠。<br>     a、如果元素的margin和它的父元素的margin-top重叠在一起，盒模型border-top的边界定义和它的父元素相同。<br>     b、另外，任意元素的父元素不参与margin的重叠，或者说只有父元素的margin-bottom是参与计算的。如果元素的border-top非零，那么元素的border-top边界位置和原来一样。<br> 一个应用了清除操作的元素的margin-top绝不会和它的块级父元素的margin-bottom重叠。 </p><p>注意，那些已经被重叠覆盖的元素的位置对其他已经重叠的元素的位置没有任何影响；只有在对这些元素的子元素定位时，border-top边界位置才是必需的。 </p><p>8、根元素的垂直margin不会被重叠。</p><p><strong>外边距(margin)重叠示例</strong></p><p>外边距重叠是指两个垂直相邻的块级元素，当上下两个边距相遇时，起外边距会产生重叠现象，且重叠后的外边距，等于其中较大者。<br> 图示：</p><p>另一个重叠现象是当一个元素包含在另一个元素之中时，子元素与父元素之间也会产生重叠现象，重叠后的外边距，等于其中最大者：<br> <img src="http://www.hujuntao.com/wp-content/uploads/2011/11/css_margin_1.gif" alt="这里写图片描述"><br> CSS 外边距(margin)重叠及防止方法<br> 同理，如果一个无内容的空元素，其自身上下边距也会产生重叠。<br> <img src="http://www.hujuntao.com/wp-content/uploads/2011/11/css_margin_2.gif" alt="这里写图片描述"><br> CSS 外边距(margin)重叠及防止方法</p><p><strong>外边距重叠的意义</strong></p><p>外边距的重叠只产生在普通流文档的上下外边距之间，这个看起来有点奇怪的规则，其实有其现实意义。设想，当我们上下排列一系列规则的块级元素（如段落P）时，那么块元素之间因为外边距重叠的存在，段落之间就不会产生双倍的距离。</p><p><strong>防止外边距重叠解决方案：</strong></p><p>虽然外边距的重叠有其一定的意义，但有时候我们在设计上却不想让元素之间产生重叠，那么可以有如下几个建议可供参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.外层元素padding代替</span><br><span class="line">2.内层元素透明边框 border:1px solid transparent;</span><br><span class="line">3.内层元素绝对定位 postion:absolute:</span><br><span class="line">4.外层元素 overflow:hidden;</span><br><span class="line">5.内层元素 加float:left;或display:inline-block;</span><br><span class="line">6.内层元素padding:1px;</span><br></pre></td></tr></table></figure><p>以上建议可根据实际情况来采取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两个或多个块级盒子的垂直相邻边界会重合。结果的边界宽度是相邻边界宽度中最大的值。如果出现负边界，则在最大的正边界中减去绝对值最大的负边界。如果没有正边界，则从零中减去绝对值最大的负边界。注意：相邻的盒子可能并非是由父子关系或同胞关系的元素生成。&lt;br&gt; 但是边界的重叠也有例
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记3</title>
    <link href="http://yoursite.com/2019/08/19/%E7%AC%94%E8%AE%B03/"/>
    <id>http://yoursite.com/2019/08/19/笔记3/</id>
    <published>2019-08-19T00:48:15.000Z</published>
    <updated>2019-08-21T08:36:39.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-设置透明"><a href="#1-设置透明" class="headerlink" title="1.设置透明"></a><strong>1.设置透明</strong></h3><p>opacity可以设置元素背景的透明，规定不透明度。从 0.0 （完全透明）到 1.0（完全不透明）。</p><p>注：opacity属性在IE8及以下的浏览器中不支持，需要使用alpha属性代替，从 0（完全透明）到 100（完全不透明）。</p><h3 id="2-图片整合技术"><a href="#2-图片整合技术" class="headerlink" title="2.图片整合技术"></a><strong>2.图片整合技术</strong></h3><p>当做一个按钮时，有时需要不同的鼠标点击效果，设置伪类切换背景图片从而改变样式。</p><p>但是做完功能以后，发现在第一次切换图片时，会发现图片有一个非常快的闪烁，这个闪烁会造成一次不佳的用户体验。</p><p> 产生问题的原因：背景图片是以外部资源的形式加载进网页的，浏览器每加载一个外部资源就需要单独的发送一次请求，但是我们外部资源并不是同时加载，浏览器会在资源被使用才去加载资源。</p><p>上面这个练习，起初浏览器只会加载link.png由于hover和active的状态没有马上触发，所以hover.png和active.png并不是立即加载的当hover被触发时，浏览器才去加载hover.png。当active被触发时，浏览器才去加载active.png。</p><p>由于加载图片需要一定的时间，所以在加载和显示过程会有一段时间，背景图片无法显示，导致出现闪烁的情况。</p><p>为了解决该问题，可以将三个图片整合为一张图片，这样可以同时将三张图片一起加载，就不会出现闪烁的问题了，</p><p>然后在通过background-position来切换要显示的图片的位置，这种技术叫做图片整合技术。</p><p>优点：</p><ul><li>将多个图片整合为一张图片里，浏览器只需要发送一次请求，可以同时加载多个图片，提高访问效率，提高了用户体验。</li><li>将多个图片整合为一张图片，减小了图片的总大小，提高请求的速度，增加了用户体验。</li></ul><h3 id="3-内联元素的盒模型"><a href="#3-内联元素的盒模型" class="headerlink" title="3. 内联元素的盒模型"></a><strong>3. 内联元素的盒模型</strong></h3><p>内联元素不能设置width和height。</p><p>内联元素可以设置<strong>水平方向</strong>内边距和边框且可以影响布局；</p><p>内联元素可以设置<strong>垂直方向</strong>内边距和边框但不可以影响布局；</p><p>内联元素支持<strong>水平方向</strong>外边距且可以影响布局；</p><p>内联元素不支持<strong>垂直方向</strong>外边距；</p><h3 id="4-display"><a href="#4-display" class="headerlink" title="4. display"></a><strong>4. display</strong></h3><p>通过display样式可以改变元素的类型</p><p>可选值：</p><p>Inline：此元素会被显示成内联元素。</p><p>Block：此元素会被显示成块元素（可换行）。</p><p>Inline-block：此元素会被显示成行内块元素（既可以设置宽高也不会换行）。</p><p>None：不显示元素，并且元素不会在页面中继续占有位置。</p><h3 id="5-overflow"><a href="#5-overflow" class="headerlink" title="5.  overflow"></a><strong>5.  overflow</strong></h3><p>子元素默认是存在于父元素的内容区内，理论上讲子元素最大可以等于父元素的内容区大小。</p><p>实际如果子元素的大小超过了父元素的内容区，则超过的大小会在父元素以外的位置显示，超出父元素的内容，我们称为溢出的内容。父元素默认是将溢出内容在父元素外显示。</p><p>通过overflow可以设置父元素如何处理溢出内容。</p><p>可选值：</p><p>Visible：默认值，不会对溢出内容做处理，元素在父元素内容区外显示。</p><p>Hidden：溢出的内容会被修剪，不会显示。</p><h3 id="6-clear"><a href="#6-clear" class="headerlink" title="6. clear"></a><strong>6. clear</strong></h3><p>Clear可以用来清除其他浮动元素对当前元素的影响</p><p>可选值：</p><p>none：默认值，不清除浮动。</p><p>left：清除左侧浮动元素对当前元素的影响。</p><p>right：清除右侧浮动元素对当前元素的影响。</p><p>both：清除两侧浮动元素对当前元素的影响。</p><h3 id="7-解决高度塌陷方案"><a href="#7-解决高度塌陷方案" class="headerlink" title="7.解决高度塌陷方案"></a><strong>7.解决高度塌陷方案</strong></h3><p>可以直接在高度塌陷的父元素最后添加一个空白的div，由于这个div没有浮动，所以他是可以撑开父元素的高度的，然后再对其进行清除浮动，这样可以通过空白的div来撑开父元素的高度，基本没有副作用。</p><p>这种方式虽然可以解决高度塌陷但是会在HTML中添加多余的结构。</p><p>可以通过after伪元素在父元素的最后添加一个空白的元素，然后对其清除浮动。</p><p>由于after在元素最后插入生成的内容为行内元素，行内元素不会独占一行，所以需要先使用display将其改为块元素再对其清除浮动。</p><p>这样做和添加一个div的原理一样，可以达到相同的效果，而且不会再页面中添加多余的div，几乎没有副作用，这是最推荐的解决高度塌陷问题的方式。</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="comment">/*添加一个内容*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*转换为一个块元素*/</span></span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清除两侧的浮动*/</span></span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="8-表单"><a href="#8-表单" class="headerlink" title="8.表单"></a><strong>8.表单</strong></h3><p>表单用于收集用户输入，表单的作用就是用来将用户信息提交给服务器的。比如：百度的搜索框 注册 登录这些操作都需要填写表单。</p><h4 id="8-1-action属性"><a href="#8-1-action属性" class="headerlink" title="8.1 action属性"></a>8.1 action属性</h4><p>action属性定义在提交表单时执行的动作。使用form标签创建一个表单，form标签中必须指定一个action属性，该属性指向的是一个服务器的地址。当我们提交表单时将会提交到action属性对应的地址，向服务器提交表单的通常做法是使用提交按钮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;action_page.php&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="8-2-method属性"><a href="#8-2-method属性" class="headerlink" title="8.2 method属性"></a>8.2 method属性</h4><p>method属性规定在提交表单时所用的 HTTP 方法（<em>GET</em> 或 <em>POST</em>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;action_page.php&quot; method=&quot;GET&quot;&gt;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;action_page.php&quot; method=&quot;POST&quot;&gt;</span><br></pre></td></tr></table></figure><p>如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息。</p><p>当使用 GET 时，表单数据在页面地址栏中是可见的。</p><p>注：GET 最适合少量数据的提交。浏览器会设定容量限制。</p><p>应该使用 POST：</p><p>如果表单正在更新数据，或者包含敏感信息（例如密码）。</p><p>POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。</p><h4 id="8-3-文本输入"><a href="#8-3-文本输入" class="headerlink" title="8.3 文本输入"></a>8.3 文本输入</h4><p>&lt; input type=”text”&gt;</p><p>定义用于文本输入的单行输入字段。使用input来创建一个文本框，它的type属性是text。</p><h4 id="8-4-提交按钮"><a href="#8-4-提交按钮" class="headerlink" title="8.4 提交按钮"></a>8.4 提交按钮</h4><p>&lt; input type=”submit”&gt;定义用于向表单处理程序（form-handler）提交表单的按钮。</p><p>表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。表单处理程序在表单的 action 属性中指定。</p><h4 id="8-5-name属性"><a href="#8-5-name属性" class="headerlink" title="8.5 name属性"></a>8.5 name属性</h4><p>如果希望表单项中的数据会提交到服务器中，还必须给表单项指定一个name属性，name表示提交内容的名字。</p><h4 id="8-6-用-fieldset-组合表单数据"><a href="#8-6-用-fieldset-组合表单数据" class="headerlink" title="8.6 用 fieldset 组合表单数据"></a>8.6 用 fieldset 组合表单数据</h4><p>fieldset 元素组合表单中的相关数据</p><p>legend 元素为 fieldset元素定义标题。</p><p>在表单中可以使用fieldset来为表单项进行分组，可以将表单项中的同一组放到一个fieldset 中。在fieldset可以使用legend子标签，来指定组名。</p><p>其余表单内容详见：<a href="https://www.w3school.com.cn/html/html_form_elements.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/html/html_form_elements.asp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-设置透明&quot;&gt;&lt;a href=&quot;#1-设置透明&quot; class=&quot;headerlink&quot; title=&quot;1.设置透明&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.设置透明&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;opacity可以设置元素背景的透明，规定不透明度。从 0.0 （完全透明
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记2</title>
    <link href="http://yoursite.com/2019/08/17/%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2019/08/17/笔记2/</id>
    <published>2019-08-17T01:56:17.000Z</published>
    <updated>2019-08-17T12:51:15.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定位"><a href="#1-定位" class="headerlink" title="1.定位"></a>1.定位</h3><p>通过使用 <a href="https://www.w3school.com.cn/cssref/pr_class_position.asp" target="_blank" rel="noopener">position 属性</a>，我们可以选择 4 种不同类型的定位，这会影响元素框生成的方式。</p><h4 id="position-属性值的含义："><a href="#position-属性值的含义：" class="headerlink" title="position 属性值的含义："></a>position 属性值的含义：</h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>absolute</td><td>生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素（离他最近的开启了定位的祖先元素）进行定位。元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td>fixed</td><td>生成绝对定位的元素，相对于浏览器窗口进行定位。元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。（会固定在浏览器窗口某个位置，不会随浏览器滚动条滚动）。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td>relative</td><td>生成相对定位的元素，相对于其正常位置进行定位。元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。相对定位会使元素提升一个层级。 因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td>static</td><td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr></tbody></table><h3 id="2-层级"><a href="#2-层级" class="headerlink" title="2.层级"></a>2.层级</h3><p>如果定位元素层级一样，html中下边的元素会盖住上面的元素。</p><h4 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h4><p>通过z-index属性可以设置元素的层级，层级越高，显示离用户越近。（z-index 仅能在定位元素上奏效）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-定位&quot;&gt;&lt;a href=&quot;#1-定位&quot; class=&quot;headerlink&quot; title=&quot;1.定位&quot;&gt;&lt;/a&gt;1.定位&lt;/h3&gt;&lt;p&gt;通过使用 &lt;a href=&quot;https://www.w3school.com.cn/cssref/pr_class_posi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记1</title>
    <link href="http://yoursite.com/2019/08/16/%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2019/08/16/笔记1/</id>
    <published>2019-08-16T08:56:45.000Z</published>
    <updated>2019-08-16T08:57:37.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax理解"><a href="#Ajax理解" class="headerlink" title="Ajax理解"></a>Ajax理解</h3><p>Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。比如在知乎页面中将鼠标悬停到标签上时创建一个新的<div>小窗口，用js向知乎服务器发送一个请求，得到这个小窗口应该显示的数据，放在这个小窗口里，这就是所谓的Ajax，不用刷新就能与服务器进行交互，更新页面的一小部分。<br>例如，门户网站的新闻列表，可能1个小时之内，服务器后台已增加了很多条新的新闻，前端可以通过刷新，从新获取最新的新闻展示在页面上。 再如，网页文字直播NBA篮球比赛，可能后台服务器每几秒就会有一条新的动态，需要用户连续刷新页面内容来获取最新动态。以上的刷新方法是用户手动对整个页面内容进行刷新，针对以上的需求，明显是不合理的，AJAX就是实现了自动更新需要刷新的数据的效果。其基本思路是前端js与后台不断通讯,及时获取前端某部分数据的变化信息,及时进行自动数据获取更新,使用户无需刷新网页即可保持页面数据最新的状态。例如，球赛文字直播、股票实时信息等。</div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ajax理解&quot;&gt;&lt;a href=&quot;#Ajax理解&quot; class=&quot;headerlink&quot; title=&quot;Ajax理解&quot;&gt;&lt;/a&gt;Ajax理解&lt;/h3&gt;&lt;p&gt;Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。比如在知乎
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/08/16/hello-world/"/>
    <id>http://yoursite.com/2019/08/16/hello-world/</id>
    <published>2019-08-16T06:41:27.267Z</published>
    <updated>2019-08-16T06:41:27.267Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
