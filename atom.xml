<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ritchie&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-30T10:48:39.921Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ritchie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git笔记</title>
    <link href="http://yoursite.com/2019/08/30/git%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/30/git笔记/</id>
    <published>2019-08-30T05:48:41.000Z</published>
    <updated>2019-08-30T10:48:39.921Z</updated>
    
    <content type="html"><![CDATA[<h5 id="指定用户名和email地址"><a href="#指定用户名和email地址" class="headerlink" title="指定用户名和email地址"></a>指定用户名和email地址</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注：<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置。</p><h5 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br></pre></td></tr></table></figure><p>pwd命令用于显示当前目录。</p><h5 id="git-init命令可以把这个目录变成Git可以管理的仓库"><a href="#git-init命令可以把这个目录变成Git可以管理的仓库" class="headerlink" title="git init命令可以把这个目录变成Git可以管理的仓库"></a><code>git init</code>命令可以把这个目录变成Git可以管理的仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h5 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi readme.txt</span><br></pre></td></tr></table></figure><h5 id="把一个文件放到Git仓库需要两步。"><a href="#把一个文件放到Git仓库需要两步。" class="headerlink" title="把一个文件放到Git仓库需要两步。"></a>把一个文件放到Git仓库需要两步。</h5><h5 id="第一步，用命令git-add把文件添加到仓库："><a href="#第一步，用命令git-add把文件添加到仓库：" class="headerlink" title="第一步，用命令git add把文件添加到仓库："></a>第一步，用命令<code>git add</code>把文件添加到仓库：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><h5 id="第二步，用命令git-commit把文件提交到仓库："><a href="#第二步，用命令git-commit把文件提交到仓库：" class="headerlink" title="第二步，用命令git commit把文件提交到仓库："></a>第二步，用命令<code>git commit</code>把文件提交到仓库：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure><p><code>git commit</code>命令，<code>-m</code>后面输入这次提交的备注，比如做出了什么修改。</p><h3 id="小结1"><a href="#小结1" class="headerlink" title="小结1"></a>小结1</h3><p>使用<code>git init</code>命令把这个目录变成Git可以管理的仓库。</p><p>添加文件到Git仓库有两步：</p><ol><li><code>git add &lt;file&gt;</code></li><li><code>git commit -m &lt;message&gt;</code></li></ol><hr><h5 id="git-status命令告知我们仓库当前的状态"><a href="#git-status命令告知我们仓库当前的状态" class="headerlink" title="git status命令告知我们仓库当前的状态"></a><code>git status</code>命令告知我们仓库当前的状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h5 id="git-diff查看修改了什么内容，diff就是difference"><a href="#git-diff查看修改了什么内容，diff就是difference" class="headerlink" title="git diff查看修改了什么内容，diff就是difference"></a><code>git diff</code>查看修改了什么内容，diff就是difference</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt</span><br></pre></td></tr></table></figure><h3 id="小结2"><a href="#小结2" class="headerlink" title="小结2"></a>小结2</h3><ul><li>使用<code>git status</code>命令查看当前仓库的状态。</li><li>如果<code>git status</code>告知文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><hr><h5 id="用git-log命令查看历史记录-git-log命令从最近到最远显示"><a href="#用git-log命令查看历史记录-git-log命令从最近到最远显示" class="headerlink" title="用git log命令查看历史记录,git log命令从最近到最远显示"></a>用<code>git log</code>命令查看历史记录,<code>git log</code>命令从最近到最远显示</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><h5 id="加上-pretty-oneline参数可以简化历史记录便于我们查看"><a href="#加上-pretty-oneline参数可以简化历史记录便于我们查看" class="headerlink" title="加上--pretty=oneline参数可以简化历史记录便于我们查看"></a>加上<code>--pretty=oneline</code>参数可以简化历史记录便于我们查看</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br></pre></td></tr></table></figure><h5 id="使用git-reset命令返回到之前的版本"><a href="#使用git-reset命令返回到之前的版本" class="headerlink" title="使用git reset命令返回到之前的版本"></a>使用<code>git reset</code>命令返回到之前的版本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p><code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，前第100个版本写成<code>HEAD~100</code>。</p><h5 id="git-reflog记录每一次命令"><a href="#git-reflog记录每一次命令" class="headerlink" title="git reflog记录每一次命令"></a><code>git reflog</code>记录每一次命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="小结3"><a href="#小结3" class="headerlink" title="小结3"></a>小结3</h3><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><hr><p>##### </p><h5 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a><strong>工作区</strong></h5><p>就是在电脑中的目录，learngit文件夹就是一个工作区。</p><h5 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a><strong>版本库</strong></h5><p>隐藏目录<code>.git</code>，是Git的版本库。</p><h5 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h5><p>下图中的stage就是暂存区。</p><p>前面把文件添加到Git的版本库中第一步是用<code>git add</code>命令，实际上就是把文件的修改添加到暂存区；第二步是用<code>git commit</code>命令，实际就是把暂存区里的所有内容全部提交到<code>master</code>分支。</p><p>可以理解为文件修改全部放到暂存区，然后一次性提交暂存区的所有修改。</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p><h3 id="小结4"><a href="#小结4" class="headerlink" title="小结4"></a>小结4</h3><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区，然后执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><hr><h5 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h5><p>如果要提交两次或多次修改，可以先进行第一次修改，然后使用<code>git add</code>命令将第一次修改放到暂存区，然后再进行第二次修改，再使用<code>git add</code>命令将第二次修改放到暂存区，以此类推，最后使用<code>git commit</code>命令提交到分支。</p><p>注：一定要将文件的修改<code>git add</code>后才可以使用<code>git commit</code>，因为<code>git commit</code>是将暂存区的文件修改提交到分支的，如果修改了文件但没有将文件修改使用<code>git add</code>添加到暂存区，则修改不会被提交到分支。</p><h3 id="小结5"><a href="#小结5" class="headerlink" title="小结5"></a>小结5</h3><p>第一次修改 –&gt; git add –&gt; 第二次修改 –&gt; git add –&gt; … –&gt; git commit</p><hr><h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p><code>git checkout --readme.txt</code>指的是把readme.txt文件在<strong>工作区</strong>的修改撤销。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br></pre></td></tr></table></figure><p><code>git reset HEAD readme.txt</code>指的是把readme.txt文件在<strong>暂存区</strong>的修改撤销。</p><h3 id="小结6"><a href="#小结6" class="headerlink" title="小结6"></a>小结6</h3><ul><li>如果对文件进行了修改还没有<code>git add</code>到暂存区，可以使用<code>git checkout --readme.txt</code>撤销工作区的修改。</li><li>如果对文件进行了修改且<code>git add</code>到暂存区了，可以使用<code>git reset HEAD readme.txt</code>撤销暂存区的修改。</li><li>如果对文件进行了修改<code>git add</code>到了暂存区，且使用<code>git commit</code>提交到了分支，可以使用<code>git reset</code>命令返回到之前的版本。</li></ul><hr><p>详见：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;指定用户名和email地址&quot;&gt;&lt;a href=&quot;#指定用户名和email地址&quot; class=&quot;headerlink&quot; title=&quot;指定用户名和email地址&quot;&gt;&lt;/a&gt;指定用户名和email地址&lt;/h5&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 外边距重叠及防止方法</title>
    <link href="http://yoursite.com/2019/08/20/CSS-%E5%A4%96%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A0%E5%8F%8A%E9%98%B2%E6%AD%A2%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/20/CSS-外边距重叠及防止方法/</id>
    <published>2019-08-20T08:39:18.000Z</published>
    <updated>2019-08-20T08:42:27.214Z</updated>
    
    <content type="html"><![CDATA[<p>两个或多个块级盒子的垂直相邻边界会重合。结果的边界宽度是相邻边界宽度中最大的值。如果出现负边界，则在最大的正边界中减去绝对值最大的负边界。如果没有正边界，则从零中减去绝对值最大的负边界。注意：相邻的盒子可能并非是由父子关系或同胞关系的元素生成。<br> 但是边界的重叠也有例外情况：</p><p>1、水平边距永远不会重合。 </p><p>2、在规范文档中，2个或以上的块级盒模型相邻的垂直margin会重叠。最终的margin值计算方法如下：<br>     a、全部都为正值，取最大者；<br>     b、不全是正值，则都取绝对值，然后用正值减去最大值；<br>     c、没有正值，则都取绝对值，然后用0减去最大值。 </p><p>注意：相邻的盒模型可能由DOM元素动态产生并没有相邻或继承关系。 </p><p>3、相邻的盒模型中，如果其中的一个是浮动的（float），垂直margin不会重叠，并且浮动的盒模型和它的子元素之间也是这样。 </p><p>4、设置了overflow属性的元素和它的子元素之间的margin不被重叠（overflow取值为visible除外）。 </p><p>5、设置了绝对定位（position:absolute）的盒模型，垂直margin不会被重叠，并且和他们的子元素之间也是一样。 </p><p>6、设置了display:inline-block的元素，垂直margin不会重叠，甚至和他们的子元素之间也是一样。 </p><p>7、如果一个盒模型的上下margin相邻，这时它的margin可能重叠覆盖（collapse through）它。在这种情况下，元素的位置（position）取决于它的相邻元素的margin是否重叠。<br>     a、如果元素的margin和它的父元素的margin-top重叠在一起，盒模型border-top的边界定义和它的父元素相同。<br>     b、另外，任意元素的父元素不参与margin的重叠，或者说只有父元素的margin-bottom是参与计算的。如果元素的border-top非零，那么元素的border-top边界位置和原来一样。<br> 一个应用了清除操作的元素的margin-top绝不会和它的块级父元素的margin-bottom重叠。 </p><p>注意，那些已经被重叠覆盖的元素的位置对其他已经重叠的元素的位置没有任何影响；只有在对这些元素的子元素定位时，border-top边界位置才是必需的。 </p><p>8、根元素的垂直margin不会被重叠。</p><p><strong>外边距(margin)重叠示例</strong></p><p>外边距重叠是指两个垂直相邻的块级元素，当上下两个边距相遇时，起外边距会产生重叠现象，且重叠后的外边距，等于其中较大者。<br> 图示：</p><p>另一个重叠现象是当一个元素包含在另一个元素之中时，子元素与父元素之间也会产生重叠现象，重叠后的外边距，等于其中最大者：<br> <img src="http://www.hujuntao.com/wp-content/uploads/2011/11/css_margin_1.gif" alt="这里写图片描述"><br> CSS 外边距(margin)重叠及防止方法<br> 同理，如果一个无内容的空元素，其自身上下边距也会产生重叠。<br> <img src="http://www.hujuntao.com/wp-content/uploads/2011/11/css_margin_2.gif" alt="这里写图片描述"><br> CSS 外边距(margin)重叠及防止方法</p><p><strong>外边距重叠的意义</strong></p><p>外边距的重叠只产生在普通流文档的上下外边距之间，这个看起来有点奇怪的规则，其实有其现实意义。设想，当我们上下排列一系列规则的块级元素（如段落P）时，那么块元素之间因为外边距重叠的存在，段落之间就不会产生双倍的距离。</p><p><strong>防止外边距重叠解决方案：</strong></p><p>虽然外边距的重叠有其一定的意义，但有时候我们在设计上却不想让元素之间产生重叠，那么可以有如下几个建议可供参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.外层元素padding代替</span><br><span class="line">2.内层元素透明边框 border:1px solid transparent;</span><br><span class="line">3.内层元素绝对定位 postion:absolute:</span><br><span class="line">4.外层元素 overflow:hidden;</span><br><span class="line">5.内层元素 加float:left;或display:inline-block;</span><br><span class="line">6.内层元素padding:1px;</span><br></pre></td></tr></table></figure><p>以上建议可根据实际情况来采取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两个或多个块级盒子的垂直相邻边界会重合。结果的边界宽度是相邻边界宽度中最大的值。如果出现负边界，则在最大的正边界中减去绝对值最大的负边界。如果没有正边界，则从零中减去绝对值最大的负边界。注意：相邻的盒子可能并非是由父子关系或同胞关系的元素生成。&lt;br&gt; 但是边界的重叠也有例
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记3</title>
    <link href="http://yoursite.com/2019/08/19/%E7%AC%94%E8%AE%B03/"/>
    <id>http://yoursite.com/2019/08/19/笔记3/</id>
    <published>2019-08-19T00:48:15.000Z</published>
    <updated>2019-08-21T08:36:39.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-设置透明"><a href="#1-设置透明" class="headerlink" title="1.设置透明"></a><strong>1.设置透明</strong></h3><p>opacity可以设置元素背景的透明，规定不透明度。从 0.0 （完全透明）到 1.0（完全不透明）。</p><p>注：opacity属性在IE8及以下的浏览器中不支持，需要使用alpha属性代替，从 0（完全透明）到 100（完全不透明）。</p><h3 id="2-图片整合技术"><a href="#2-图片整合技术" class="headerlink" title="2.图片整合技术"></a><strong>2.图片整合技术</strong></h3><p>当做一个按钮时，有时需要不同的鼠标点击效果，设置伪类切换背景图片从而改变样式。</p><p>但是做完功能以后，发现在第一次切换图片时，会发现图片有一个非常快的闪烁，这个闪烁会造成一次不佳的用户体验。</p><p> 产生问题的原因：背景图片是以外部资源的形式加载进网页的，浏览器每加载一个外部资源就需要单独的发送一次请求，但是我们外部资源并不是同时加载，浏览器会在资源被使用才去加载资源。</p><p>上面这个练习，起初浏览器只会加载link.png由于hover和active的状态没有马上触发，所以hover.png和active.png并不是立即加载的当hover被触发时，浏览器才去加载hover.png。当active被触发时，浏览器才去加载active.png。</p><p>由于加载图片需要一定的时间，所以在加载和显示过程会有一段时间，背景图片无法显示，导致出现闪烁的情况。</p><p>为了解决该问题，可以将三个图片整合为一张图片，这样可以同时将三张图片一起加载，就不会出现闪烁的问题了，</p><p>然后在通过background-position来切换要显示的图片的位置，这种技术叫做图片整合技术。</p><p>优点：</p><ul><li>将多个图片整合为一张图片里，浏览器只需要发送一次请求，可以同时加载多个图片，提高访问效率，提高了用户体验。</li><li>将多个图片整合为一张图片，减小了图片的总大小，提高请求的速度，增加了用户体验。</li></ul><h3 id="3-内联元素的盒模型"><a href="#3-内联元素的盒模型" class="headerlink" title="3. 内联元素的盒模型"></a><strong>3. 内联元素的盒模型</strong></h3><p>内联元素不能设置width和height。</p><p>内联元素可以设置<strong>水平方向</strong>内边距和边框且可以影响布局；</p><p>内联元素可以设置<strong>垂直方向</strong>内边距和边框但不可以影响布局；</p><p>内联元素支持<strong>水平方向</strong>外边距且可以影响布局；</p><p>内联元素不支持<strong>垂直方向</strong>外边距；</p><h3 id="4-display"><a href="#4-display" class="headerlink" title="4. display"></a><strong>4. display</strong></h3><p>通过display样式可以改变元素的类型</p><p>可选值：</p><p>Inline：此元素会被显示成内联元素。</p><p>Block：此元素会被显示成块元素（可换行）。</p><p>Inline-block：此元素会被显示成行内块元素（既可以设置宽高也不会换行）。</p><p>None：不显示元素，并且元素不会在页面中继续占有位置。</p><h3 id="5-overflow"><a href="#5-overflow" class="headerlink" title="5.  overflow"></a><strong>5.  overflow</strong></h3><p>子元素默认是存在于父元素的内容区内，理论上讲子元素最大可以等于父元素的内容区大小。</p><p>实际如果子元素的大小超过了父元素的内容区，则超过的大小会在父元素以外的位置显示，超出父元素的内容，我们称为溢出的内容。父元素默认是将溢出内容在父元素外显示。</p><p>通过overflow可以设置父元素如何处理溢出内容。</p><p>可选值：</p><p>Visible：默认值，不会对溢出内容做处理，元素在父元素内容区外显示。</p><p>Hidden：溢出的内容会被修剪，不会显示。</p><h3 id="6-clear"><a href="#6-clear" class="headerlink" title="6. clear"></a><strong>6. clear</strong></h3><p>Clear可以用来清除其他浮动元素对当前元素的影响</p><p>可选值：</p><p>none：默认值，不清除浮动。</p><p>left：清除左侧浮动元素对当前元素的影响。</p><p>right：清除右侧浮动元素对当前元素的影响。</p><p>both：清除两侧浮动元素对当前元素的影响。</p><h3 id="7-解决高度塌陷方案"><a href="#7-解决高度塌陷方案" class="headerlink" title="7.解决高度塌陷方案"></a><strong>7.解决高度塌陷方案</strong></h3><p>可以直接在高度塌陷的父元素最后添加一个空白的div，由于这个div没有浮动，所以他是可以撑开父元素的高度的，然后再对其进行清除浮动，这样可以通过空白的div来撑开父元素的高度，基本没有副作用。</p><p>这种方式虽然可以解决高度塌陷但是会在HTML中添加多余的结构。</p><p>可以通过after伪元素在父元素的最后添加一个空白的元素，然后对其清除浮动。</p><p>由于after在元素最后插入生成的内容为行内元素，行内元素不会独占一行，所以需要先使用display将其改为块元素再对其清除浮动。</p><p>这样做和添加一个div的原理一样，可以达到相同的效果，而且不会再页面中添加多余的div，几乎没有副作用，这是最推荐的解决高度塌陷问题的方式。</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="comment">/*添加一个内容*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*转换为一个块元素*/</span></span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清除两侧的浮动*/</span></span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="8-表单"><a href="#8-表单" class="headerlink" title="8.表单"></a><strong>8.表单</strong></h3><p>表单用于收集用户输入，表单的作用就是用来将用户信息提交给服务器的。比如：百度的搜索框 注册 登录这些操作都需要填写表单。</p><h4 id="8-1-action属性"><a href="#8-1-action属性" class="headerlink" title="8.1 action属性"></a>8.1 action属性</h4><p>action属性定义在提交表单时执行的动作。使用form标签创建一个表单，form标签中必须指定一个action属性，该属性指向的是一个服务器的地址。当我们提交表单时将会提交到action属性对应的地址，向服务器提交表单的通常做法是使用提交按钮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;action_page.php&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="8-2-method属性"><a href="#8-2-method属性" class="headerlink" title="8.2 method属性"></a>8.2 method属性</h4><p>method属性规定在提交表单时所用的 HTTP 方法（<em>GET</em> 或 <em>POST</em>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;action_page.php&quot; method=&quot;GET&quot;&gt;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;action_page.php&quot; method=&quot;POST&quot;&gt;</span><br></pre></td></tr></table></figure><p>如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息。</p><p>当使用 GET 时，表单数据在页面地址栏中是可见的。</p><p>注：GET 最适合少量数据的提交。浏览器会设定容量限制。</p><p>应该使用 POST：</p><p>如果表单正在更新数据，或者包含敏感信息（例如密码）。</p><p>POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。</p><h4 id="8-3-文本输入"><a href="#8-3-文本输入" class="headerlink" title="8.3 文本输入"></a>8.3 文本输入</h4><p>&lt; input type=”text”&gt;</p><p>定义用于文本输入的单行输入字段。使用input来创建一个文本框，它的type属性是text。</p><h4 id="8-4-提交按钮"><a href="#8-4-提交按钮" class="headerlink" title="8.4 提交按钮"></a>8.4 提交按钮</h4><p>&lt; input type=”submit”&gt;定义用于向表单处理程序（form-handler）提交表单的按钮。</p><p>表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。表单处理程序在表单的 action 属性中指定。</p><h4 id="8-5-name属性"><a href="#8-5-name属性" class="headerlink" title="8.5 name属性"></a>8.5 name属性</h4><p>如果希望表单项中的数据会提交到服务器中，还必须给表单项指定一个name属性，name表示提交内容的名字。</p><h4 id="8-6-用-fieldset-组合表单数据"><a href="#8-6-用-fieldset-组合表单数据" class="headerlink" title="8.6 用 fieldset 组合表单数据"></a>8.6 用 fieldset 组合表单数据</h4><p>fieldset 元素组合表单中的相关数据</p><p>legend 元素为 fieldset元素定义标题。</p><p>在表单中可以使用fieldset来为表单项进行分组，可以将表单项中的同一组放到一个fieldset 中。在fieldset可以使用legend子标签，来指定组名。</p><p>其余表单内容详见：<a href="https://www.w3school.com.cn/html/html_form_elements.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/html/html_form_elements.asp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-设置透明&quot;&gt;&lt;a href=&quot;#1-设置透明&quot; class=&quot;headerlink&quot; title=&quot;1.设置透明&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.设置透明&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;opacity可以设置元素背景的透明，规定不透明度。从 0.0 （完全透明
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记2</title>
    <link href="http://yoursite.com/2019/08/17/%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2019/08/17/笔记2/</id>
    <published>2019-08-17T01:56:17.000Z</published>
    <updated>2019-08-17T12:51:15.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定位"><a href="#1-定位" class="headerlink" title="1.定位"></a>1.定位</h3><p>通过使用 <a href="https://www.w3school.com.cn/cssref/pr_class_position.asp" target="_blank" rel="noopener">position 属性</a>，我们可以选择 4 种不同类型的定位，这会影响元素框生成的方式。</p><h4 id="position-属性值的含义："><a href="#position-属性值的含义：" class="headerlink" title="position 属性值的含义："></a>position 属性值的含义：</h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>absolute</td><td>生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素（离他最近的开启了定位的祖先元素）进行定位。元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td>fixed</td><td>生成绝对定位的元素，相对于浏览器窗口进行定位。元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。（会固定在浏览器窗口某个位置，不会随浏览器滚动条滚动）。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td>relative</td><td>生成相对定位的元素，相对于其正常位置进行定位。元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。相对定位会使元素提升一个层级。 因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td>static</td><td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr></tbody></table><h3 id="2-层级"><a href="#2-层级" class="headerlink" title="2.层级"></a>2.层级</h3><p>如果定位元素层级一样，html中下边的元素会盖住上面的元素。</p><h4 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h4><p>通过z-index属性可以设置元素的层级，层级越高，显示离用户越近。（z-index 仅能在定位元素上奏效）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-定位&quot;&gt;&lt;a href=&quot;#1-定位&quot; class=&quot;headerlink&quot; title=&quot;1.定位&quot;&gt;&lt;/a&gt;1.定位&lt;/h3&gt;&lt;p&gt;通过使用 &lt;a href=&quot;https://www.w3school.com.cn/cssref/pr_class_posi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记1</title>
    <link href="http://yoursite.com/2019/08/16/%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2019/08/16/笔记1/</id>
    <published>2019-08-16T08:56:45.000Z</published>
    <updated>2019-08-16T08:57:37.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax理解"><a href="#Ajax理解" class="headerlink" title="Ajax理解"></a>Ajax理解</h3><p>Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。比如在知乎页面中将鼠标悬停到标签上时创建一个新的<div>小窗口，用js向知乎服务器发送一个请求，得到这个小窗口应该显示的数据，放在这个小窗口里，这就是所谓的Ajax，不用刷新就能与服务器进行交互，更新页面的一小部分。<br>例如，门户网站的新闻列表，可能1个小时之内，服务器后台已增加了很多条新的新闻，前端可以通过刷新，从新获取最新的新闻展示在页面上。 再如，网页文字直播NBA篮球比赛，可能后台服务器每几秒就会有一条新的动态，需要用户连续刷新页面内容来获取最新动态。以上的刷新方法是用户手动对整个页面内容进行刷新，针对以上的需求，明显是不合理的，AJAX就是实现了自动更新需要刷新的数据的效果。其基本思路是前端js与后台不断通讯,及时获取前端某部分数据的变化信息,及时进行自动数据获取更新,使用户无需刷新网页即可保持页面数据最新的状态。例如，球赛文字直播、股票实时信息等。</div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ajax理解&quot;&gt;&lt;a href=&quot;#Ajax理解&quot; class=&quot;headerlink&quot; title=&quot;Ajax理解&quot;&gt;&lt;/a&gt;Ajax理解&lt;/h3&gt;&lt;p&gt;Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。比如在知乎
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/08/16/hello-world/"/>
    <id>http://yoursite.com/2019/08/16/hello-world/</id>
    <published>2019-08-16T06:41:27.267Z</published>
    <updated>2019-08-16T06:41:27.267Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
