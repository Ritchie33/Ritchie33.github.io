{"meta":{"title":"Ritchie's blog","subtitle":null,"description":"Ritchie's blog","author":"Ritchie","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-08-16T09:48:46.000Z","updated":"2019-08-16T09:50:28.991Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-16T09:48:21.000Z","updated":"2019-08-16T09:50:07.512Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"笔记2","slug":"笔记2","date":"2019-08-17T01:56:17.000Z","updated":"2019-08-17T12:51:15.374Z","comments":true,"path":"2019/08/17/笔记2/","link":"","permalink":"http://yoursite.com/2019/08/17/笔记2/","excerpt":"","text":"1.定位通过使用 position 属性，我们可以选择 4 种不同类型的定位，这会影响元素框生成的方式。 position 属性值的含义： 值 描述 absolute 生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素（离他最近的开启了定位的祖先元素）进行定位。元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 fixed 生成绝对定位的元素，相对于浏览器窗口进行定位。元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。（会固定在浏览器窗口某个位置，不会随浏览器滚动条滚动）。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 relative 生成相对定位的元素，相对于其正常位置进行定位。元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。相对定位会使元素提升一个层级。 因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。 static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。 2.层级如果定位元素层级一样，html中下边的元素会盖住上面的元素。 z-index通过z-index属性可以设置元素的层级，层级越高，显示离用户越近。（z-index 仅能在定位元素上奏效）","categories":[],"tags":[]},{"title":"笔记1","slug":"笔记1","date":"2019-08-16T08:56:45.000Z","updated":"2019-08-16T08:57:37.854Z","comments":true,"path":"2019/08/16/笔记1/","link":"","permalink":"http://yoursite.com/2019/08/16/笔记1/","excerpt":"","text":"Ajax理解Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。比如在知乎页面中将鼠标悬停到标签上时创建一个新的小窗口，用js向知乎服务器发送一个请求，得到这个小窗口应该显示的数据，放在这个小窗口里，这就是所谓的Ajax，不用刷新就能与服务器进行交互，更新页面的一小部分。例如，门户网站的新闻列表，可能1个小时之内，服务器后台已增加了很多条新的新闻，前端可以通过刷新，从新获取最新的新闻展示在页面上。 再如，网页文字直播NBA篮球比赛，可能后台服务器每几秒就会有一条新的动态，需要用户连续刷新页面内容来获取最新动态。以上的刷新方法是用户手动对整个页面内容进行刷新，针对以上的需求，明显是不合理的，AJAX就是实现了自动更新需要刷新的数据的效果。其基本思路是前端js与后台不断通讯,及时获取前端某部分数据的变化信息,及时进行自动数据获取更新,使用户无需刷新网页即可保持页面数据最新的状态。例如，球赛文字直播、股票实时信息等。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-16T06:41:27.267Z","updated":"2019-08-16T06:41:27.267Z","comments":true,"path":"2019/08/16/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}